/********************************************************************************
** Form generated from reading UI file 'mainwindow.ui'
**
** Created by: Qt User Interface Compiler version 5.5.1
**
** WARNING! All changes made in this file will be lost when recompiling UI file!
********************************************************************************/

#ifndef UI_MAINWINDOW_H
#define UI_MAINWINDOW_H

#include <QtCore/QVariant>
#include <QtWidgets/QAction>
#include <QtWidgets/QApplication>
#include <QtWidgets/QButtonGroup>
#include <QtWidgets/QGridLayout>
#include <QtWidgets/QHeaderView>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QMenu>
#include <QtWidgets/QMenuBar>
#include <QtWidgets/QStatusBar>
#include <QtWidgets/QToolBar>
#include <QtWidgets/QWidget>
#include "mdiarea.hxx"

QT_BEGIN_NAMESPACE

class Ui_mainwindow
{
public:
    QAction *actionNew;
    QAction *actionOpen;
    QAction *actionOpen_and_Add_space;
    QAction *actionSave_As;
    QAction *actionClose;
    QAction *actionExit;
    QAction *actionClose_Window;
    QAction *actionClose_All;
    QAction *actionTile;
    QAction *actionCascade;
    QAction *actionNext;
    QAction *actionPrevious;
    QAction *actionAbout;
    QAction *actionOpen_and_Add_time;
    QAction *actionAbout_Qt;
    QAction *actionLighting;
    QAction *actionAntialiasing;
    QAction *actionVertex_Color;
    QAction *actionFace_Color;
    QAction *actionRender_Point;
    QAction *actionRender_Line;
    QAction *actionRender_Fill;
    QAction *actionSuperimpose_Edges;
    QAction *actionSuperimpose_Vertices;
    QAction *actionSmooth_Shading;
    QAction *actionCulling;
    QAction *actionParams;
    QAction *actionReverse_start;
    QAction *actionReverse_start_loop;
    QAction *actionStart;
    QAction *actionStart_loop;
    QAction *actionStop;
    QAction *actionDynFirst;
    QAction *actionDynPrevious;
    QAction *actionDynNext;
    QAction *actionDynLast;
    QAction *actionDelete;
    QAction *actionCouplingRotations;
    QAction *actionShow_entire_scene;
    QAction *actionOpen_space;
    QAction *actionOpen_time;
    QAction *actionAbout_QGLViewer;
    QAction *actionAbout_CGAL;
    QAction *actionCopy_viewpoint;
    QAction *actionPaste_viewpoint;
    QAction *actionBackground_color;
    QAction *actionVertex_color;
    QAction *actionEdge_color;
    QAction *actionClone;
    QAction *actionMaterial;
    QAction *actionBounding_box;
    QAction *actionBounding_box_when_moving;
    QAction *actionScreenshot;
    QAction *actionVBO;
    QAction *actionFace_color;
    QAction *actionShow_normals;
    QAction *actionCenter_all_objects;
    QAction *actionScreenshot_sequence;
    QAction *actionShow_FPS;
    QAction *actionShow_axis;
    QAction *actionShow_grid;
    QAction *actionShow_light;
    QAction *actionClipboard_screenshot;
    QAction *actionReset_viewpoint;
    QAction *actionSuperimpose_Vertices_big;
    QAction *actionChange_MDI_View_Mode;
    QAction *actionChange_Viewer_Mode_Space_Time;
    QAction *actionOpen_texture;
    QAction *actionTexture_settings;
    QAction *actionTexture_to_Vertex_Color;
    QAction *actionTexture_Mode;
    QWidget *centralwidget;
    QGridLayout *gridLayout;
    MdiArea *mdiArea;
    QMenuBar *menubar;
    QMenu *menuFile;
    QMenu *menuWindow;
    QMenu *menuHelp;
    QMenu *menuComponents;
    QMenu *menuTools;
    QMenu *menuDistance_Quality_measure;
    QMenu *menuAnalysis_Filtering;
    QMenu *menuSegmentation;
    QMenu *menuRemeshing_Subdivision;
    QMenu *menuCompression;
    QMenu *menuWatermaking;
    QMenu *menuExamples;
    QStatusBar *statusbar;
    QToolBar *Toolbar_file;
    QToolBar *Toolbar_texture;
    QToolBar *Toolbar_viewer;
    QToolBar *Toolbar_color;
    QToolBar *Toolbar_show;
    QToolBar *Toolbar_view;
    QToolBar *Toolbar_capture;
    QToolBar *Toolbar_dynamic;

    void setupUi(QMainWindow *mainwindow)
    {
        if (mainwindow->objectName().isEmpty())
            mainwindow->setObjectName(QStringLiteral("mainwindow"));
        mainwindow->resize(1086, 793);
        QIcon icon;
        icon.addFile(QStringLiteral(":/logo/Pictures/MEPP.png"), QSize(), QIcon::Normal, QIcon::Off);
        mainwindow->setWindowIcon(icon);
        actionNew = new QAction(mainwindow);
        actionNew->setObjectName(QStringLiteral("actionNew"));
        QIcon icon1;
        icon1.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\new.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionNew->setIcon(icon1);
        actionOpen = new QAction(mainwindow);
        actionOpen->setObjectName(QStringLiteral("actionOpen"));
        QIcon icon2;
        icon2.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\open.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionOpen->setIcon(icon2);
        actionOpen_and_Add_space = new QAction(mainwindow);
        actionOpen_and_Add_space->setObjectName(QStringLiteral("actionOpen_and_Add_space"));
        actionSave_As = new QAction(mainwindow);
        actionSave_As->setObjectName(QStringLiteral("actionSave_As"));
        QIcon icon3;
        icon3.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\save.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionSave_As->setIcon(icon3);
        actionClose = new QAction(mainwindow);
        actionClose->setObjectName(QStringLiteral("actionClose"));
        actionExit = new QAction(mainwindow);
        actionExit->setObjectName(QStringLiteral("actionExit"));
        actionClose_Window = new QAction(mainwindow);
        actionClose_Window->setObjectName(QStringLiteral("actionClose_Window"));
        actionClose_All = new QAction(mainwindow);
        actionClose_All->setObjectName(QStringLiteral("actionClose_All"));
        actionTile = new QAction(mainwindow);
        actionTile->setObjectName(QStringLiteral("actionTile"));
        actionCascade = new QAction(mainwindow);
        actionCascade->setObjectName(QStringLiteral("actionCascade"));
        actionNext = new QAction(mainwindow);
        actionNext->setObjectName(QStringLiteral("actionNext"));
        actionPrevious = new QAction(mainwindow);
        actionPrevious->setObjectName(QStringLiteral("actionPrevious"));
        actionAbout = new QAction(mainwindow);
        actionAbout->setObjectName(QStringLiteral("actionAbout"));
        actionOpen_and_Add_time = new QAction(mainwindow);
        actionOpen_and_Add_time->setObjectName(QStringLiteral("actionOpen_and_Add_time"));
        actionAbout_Qt = new QAction(mainwindow);
        actionAbout_Qt->setObjectName(QStringLiteral("actionAbout_Qt"));
        actionLighting = new QAction(mainwindow);
        actionLighting->setObjectName(QStringLiteral("actionLighting"));
        actionLighting->setCheckable(true);
        actionLighting->setEnabled(true);
        QIcon icon4;
        icon4.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Lighting.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionLighting->setIcon(icon4);
        actionAntialiasing = new QAction(mainwindow);
        actionAntialiasing->setObjectName(QStringLiteral("actionAntialiasing"));
        actionAntialiasing->setCheckable(true);
        actionAntialiasing->setEnabled(true);
        QIcon icon5;
        icon5.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Antialiasing.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionAntialiasing->setIcon(icon5);
        actionVertex_Color = new QAction(mainwindow);
        actionVertex_Color->setObjectName(QStringLiteral("actionVertex_Color"));
        actionVertex_Color->setCheckable(true);
        QIcon icon6;
        icon6.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_VertexColorMode.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionVertex_Color->setIcon(icon6);
        actionFace_Color = new QAction(mainwindow);
        actionFace_Color->setObjectName(QStringLiteral("actionFace_Color"));
        actionFace_Color->setCheckable(true);
        QIcon icon7;
        icon7.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_FaceColorMode.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionFace_Color->setIcon(icon7);
        actionRender_Point = new QAction(mainwindow);
        actionRender_Point->setObjectName(QStringLiteral("actionRender_Point"));
        actionRender_Point->setCheckable(true);
        QIcon icon8;
        icon8.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Vertices.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionRender_Point->setIcon(icon8);
        actionRender_Line = new QAction(mainwindow);
        actionRender_Line->setObjectName(QStringLiteral("actionRender_Line"));
        actionRender_Line->setCheckable(true);
        QIcon icon9;
        icon9.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Edges.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionRender_Line->setIcon(icon9);
        actionRender_Fill = new QAction(mainwindow);
        actionRender_Fill->setObjectName(QStringLiteral("actionRender_Fill"));
        actionRender_Fill->setCheckable(true);
        QIcon icon10;
        icon10.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_RenderFill.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionRender_Fill->setIcon(icon10);
        actionSuperimpose_Edges = new QAction(mainwindow);
        actionSuperimpose_Edges->setObjectName(QStringLiteral("actionSuperimpose_Edges"));
        actionSuperimpose_Edges->setCheckable(true);
        QIcon icon11;
        icon11.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_SuperimposeEdges.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionSuperimpose_Edges->setIcon(icon11);
        actionSuperimpose_Vertices = new QAction(mainwindow);
        actionSuperimpose_Vertices->setObjectName(QStringLiteral("actionSuperimpose_Vertices"));
        actionSuperimpose_Vertices->setCheckable(true);
        QIcon icon12;
        icon12.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_SuperimposeVertices.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionSuperimpose_Vertices->setIcon(icon12);
        actionSmooth_Shading = new QAction(mainwindow);
        actionSmooth_Shading->setObjectName(QStringLiteral("actionSmooth_Shading"));
        actionSmooth_Shading->setCheckable(true);
        QIcon icon13;
        icon13.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Smoothing.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionSmooth_Shading->setIcon(icon13);
        actionCulling = new QAction(mainwindow);
        actionCulling->setObjectName(QStringLiteral("actionCulling"));
        actionCulling->setCheckable(true);
        QIcon icon14;
        icon14.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Culling.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionCulling->setIcon(icon14);
        actionParams = new QAction(mainwindow);
        actionParams->setObjectName(QStringLiteral("actionParams"));
        QIcon icon15;
        icon15.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Params.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionParams->setIcon(icon15);
        actionReverse_start = new QAction(mainwindow);
        actionReverse_start->setObjectName(QStringLiteral("actionReverse_start"));
        QIcon icon16;
        icon16.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_ReverseStart.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionReverse_start->setIcon(icon16);
        actionReverse_start_loop = new QAction(mainwindow);
        actionReverse_start_loop->setObjectName(QStringLiteral("actionReverse_start_loop"));
        QIcon icon17;
        icon17.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_ReverseStartLoop.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionReverse_start_loop->setIcon(icon17);
        actionStart = new QAction(mainwindow);
        actionStart->setObjectName(QStringLiteral("actionStart"));
        QIcon icon18;
        icon18.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Start.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionStart->setIcon(icon18);
        actionStart_loop = new QAction(mainwindow);
        actionStart_loop->setObjectName(QStringLiteral("actionStart_loop"));
        QIcon icon19;
        icon19.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_StartLoop.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionStart_loop->setIcon(icon19);
        actionStop = new QAction(mainwindow);
        actionStop->setObjectName(QStringLiteral("actionStop"));
        QIcon icon20;
        icon20.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Stop.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionStop->setIcon(icon20);
        actionDynFirst = new QAction(mainwindow);
        actionDynFirst->setObjectName(QStringLiteral("actionDynFirst"));
        QIcon icon21;
        icon21.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_First.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionDynFirst->setIcon(icon21);
        actionDynPrevious = new QAction(mainwindow);
        actionDynPrevious->setObjectName(QStringLiteral("actionDynPrevious"));
        QIcon icon22;
        icon22.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Previous.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionDynPrevious->setIcon(icon22);
        actionDynNext = new QAction(mainwindow);
        actionDynNext->setObjectName(QStringLiteral("actionDynNext"));
        QIcon icon23;
        icon23.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Next.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionDynNext->setIcon(icon23);
        actionDynLast = new QAction(mainwindow);
        actionDynLast->setObjectName(QStringLiteral("actionDynLast"));
        QIcon icon24;
        icon24.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Last.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionDynLast->setIcon(icon24);
        actionDelete = new QAction(mainwindow);
        actionDelete->setObjectName(QStringLiteral("actionDelete"));
        QIcon icon25;
        icon25.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\cut.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionDelete->setIcon(icon25);
        actionCouplingRotations = new QAction(mainwindow);
        actionCouplingRotations->setObjectName(QStringLiteral("actionCouplingRotations"));
        actionCouplingRotations->setCheckable(true);
        QIcon icon26;
        icon26.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_CoupleRotations.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionCouplingRotations->setIcon(icon26);
        actionShow_entire_scene = new QAction(mainwindow);
        actionShow_entire_scene->setObjectName(QStringLiteral("actionShow_entire_scene"));
        QIcon icon27;
        icon27.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_ShowAll.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionShow_entire_scene->setIcon(icon27);
        actionOpen_space = new QAction(mainwindow);
        actionOpen_space->setObjectName(QStringLiteral("actionOpen_space"));
        actionOpen_time = new QAction(mainwindow);
        actionOpen_time->setObjectName(QStringLiteral("actionOpen_time"));
        actionAbout_QGLViewer = new QAction(mainwindow);
        actionAbout_QGLViewer->setObjectName(QStringLiteral("actionAbout_QGLViewer"));
        actionAbout_CGAL = new QAction(mainwindow);
        actionAbout_CGAL->setObjectName(QStringLiteral("actionAbout_CGAL"));
        actionCopy_viewpoint = new QAction(mainwindow);
        actionCopy_viewpoint->setObjectName(QStringLiteral("actionCopy_viewpoint"));
        QIcon icon28;
        icon28.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_CopyViewpoint.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionCopy_viewpoint->setIcon(icon28);
        actionPaste_viewpoint = new QAction(mainwindow);
        actionPaste_viewpoint->setObjectName(QStringLiteral("actionPaste_viewpoint"));
        QIcon icon29;
        icon29.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_PasteViewpoint.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionPaste_viewpoint->setIcon(icon29);
        actionBackground_color = new QAction(mainwindow);
        actionBackground_color->setObjectName(QStringLiteral("actionBackground_color"));
        QIcon icon30;
        icon30.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_BackgroundColor.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionBackground_color->setIcon(icon30);
        actionVertex_color = new QAction(mainwindow);
        actionVertex_color->setObjectName(QStringLiteral("actionVertex_color"));
        QIcon icon31;
        icon31.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_PointColor.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionVertex_color->setIcon(icon31);
        actionEdge_color = new QAction(mainwindow);
        actionEdge_color->setObjectName(QStringLiteral("actionEdge_color"));
        QIcon icon32;
        icon32.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_EdgeColor.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionEdge_color->setIcon(icon32);
        actionClone = new QAction(mainwindow);
        actionClone->setObjectName(QStringLiteral("actionClone"));
        QIcon icon33;
        icon33.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\copy.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionClone->setIcon(icon33);
        actionMaterial = new QAction(mainwindow);
        actionMaterial->setObjectName(QStringLiteral("actionMaterial"));
        QIcon icon34;
        icon34.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Material.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionMaterial->setIcon(icon34);
        actionBounding_box = new QAction(mainwindow);
        actionBounding_box->setObjectName(QStringLiteral("actionBounding_box"));
        actionBounding_box->setCheckable(true);
        QIcon icon35;
        icon35.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_BoundingBox.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionBounding_box->setIcon(icon35);
        actionBounding_box_when_moving = new QAction(mainwindow);
        actionBounding_box_when_moving->setObjectName(QStringLiteral("actionBounding_box_when_moving"));
        actionBounding_box_when_moving->setCheckable(true);
        QIcon icon36;
        icon36.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_BoundingBoxOnMove.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionBounding_box_when_moving->setIcon(icon36);
        actionScreenshot = new QAction(mainwindow);
        actionScreenshot->setObjectName(QStringLiteral("actionScreenshot"));
        QIcon icon37;
        icon37.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Screenshot.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionScreenshot->setIcon(icon37);
        actionVBO = new QAction(mainwindow);
        actionVBO->setObjectName(QStringLiteral("actionVBO"));
        actionVBO->setCheckable(true);
        QIcon icon38;
        icon38.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_DL.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionVBO->setIcon(icon38);
        actionFace_color = new QAction(mainwindow);
        actionFace_color->setObjectName(QStringLiteral("actionFace_color"));
        QIcon icon39;
        icon39.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_FaceColor.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionFace_color->setIcon(icon39);
        actionShow_normals = new QAction(mainwindow);
        actionShow_normals->setObjectName(QStringLiteral("actionShow_normals"));
        actionShow_normals->setCheckable(true);
        QIcon icon40;
        icon40.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Normals.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionShow_normals->setIcon(icon40);
        actionCenter_all_objects = new QAction(mainwindow);
        actionCenter_all_objects->setObjectName(QStringLiteral("actionCenter_all_objects"));
        QIcon icon41;
        icon41.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_CenterAll.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionCenter_all_objects->setIcon(icon41);
        actionScreenshot_sequence = new QAction(mainwindow);
        actionScreenshot_sequence->setObjectName(QStringLiteral("actionScreenshot_sequence"));
        actionScreenshot_sequence->setCheckable(true);
        QIcon icon42;
        icon42.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_ScreenshotSequence.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionScreenshot_sequence->setIcon(icon42);
        actionShow_FPS = new QAction(mainwindow);
        actionShow_FPS->setObjectName(QStringLiteral("actionShow_FPS"));
        actionShow_FPS->setCheckable(true);
        QIcon icon43;
        icon43.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_FPS.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionShow_FPS->setIcon(icon43);
        actionShow_axis = new QAction(mainwindow);
        actionShow_axis->setObjectName(QStringLiteral("actionShow_axis"));
        actionShow_axis->setCheckable(true);
        QIcon icon44;
        icon44.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Axis.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionShow_axis->setIcon(icon44);
        actionShow_grid = new QAction(mainwindow);
        actionShow_grid->setObjectName(QStringLiteral("actionShow_grid"));
        actionShow_grid->setCheckable(true);
        QIcon icon45;
        icon45.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Grid.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionShow_grid->setIcon(icon45);
        actionShow_light = new QAction(mainwindow);
        actionShow_light->setObjectName(QStringLiteral("actionShow_light"));
        actionShow_light->setCheckable(true);
        actionClipboard_screenshot = new QAction(mainwindow);
        actionClipboard_screenshot->setObjectName(QStringLiteral("actionClipboard_screenshot"));
        QIcon icon46;
        icon46.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_Clipboard.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionClipboard_screenshot->setIcon(icon46);
        actionReset_viewpoint = new QAction(mainwindow);
        actionReset_viewpoint->setObjectName(QStringLiteral("actionReset_viewpoint"));
        actionReset_viewpoint->setIcon(icon27);
        actionSuperimpose_Vertices_big = new QAction(mainwindow);
        actionSuperimpose_Vertices_big->setObjectName(QStringLiteral("actionSuperimpose_Vertices_big"));
        actionSuperimpose_Vertices_big->setCheckable(true);
        QIcon icon47;
        icon47.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\_SuperimposeSpheres.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionSuperimpose_Vertices_big->setIcon(icon47);
        actionChange_MDI_View_Mode = new QAction(mainwindow);
        actionChange_MDI_View_Mode->setObjectName(QStringLiteral("actionChange_MDI_View_Mode"));
        actionChange_Viewer_Mode_Space_Time = new QAction(mainwindow);
        actionChange_Viewer_Mode_Space_Time->setObjectName(QStringLiteral("actionChange_Viewer_Mode_Space_Time"));
        actionOpen_texture = new QAction(mainwindow);
        actionOpen_texture->setObjectName(QStringLiteral("actionOpen_texture"));
        QIcon icon48;
        icon48.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\textureOpen.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionOpen_texture->setIcon(icon48);
        actionTexture_settings = new QAction(mainwindow);
        actionTexture_settings->setObjectName(QStringLiteral("actionTexture_settings"));
        actionTexture_to_Vertex_Color = new QAction(mainwindow);
        actionTexture_to_Vertex_Color->setObjectName(QStringLiteral("actionTexture_to_Vertex_Color"));
        QIcon icon49;
        icon49.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\textureToColor.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionTexture_to_Vertex_Color->setIcon(icon49);
        actionTexture_Mode = new QAction(mainwindow);
        actionTexture_Mode->setObjectName(QStringLiteral("actionTexture_Mode"));
        actionTexture_Mode->setCheckable(true);
        QIcon icon50;
        icon50.addFile(QStringLiteral("C:\\Users\\Isaac\\Documents\\Visual Studio 2013\\Projects\\MEPP-master\\src\\mepp\\Pictures\\Icons\\textureEnable.png"), QSize(), QIcon::Normal, QIcon::Off);
        actionTexture_Mode->setIcon(icon50);
        centralwidget = new QWidget(mainwindow);
        centralwidget->setObjectName(QStringLiteral("centralwidget"));
        gridLayout = new QGridLayout(centralwidget);
        gridLayout->setObjectName(QStringLiteral("gridLayout"));
        mdiArea = new MdiArea(centralwidget);
        mdiArea->setObjectName(QStringLiteral("mdiArea"));
        mdiArea->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
        mdiArea->setHorizontalScrollBarPolicy(Qt::ScrollBarAsNeeded);

        gridLayout->addWidget(mdiArea, 0, 0, 1, 1);

        mainwindow->setCentralWidget(centralwidget);
        menubar = new QMenuBar(mainwindow);
        menubar->setObjectName(QStringLiteral("menubar"));
        menubar->setGeometry(QRect(0, 0, 1086, 26));
        menuFile = new QMenu(menubar);
        menuFile->setObjectName(QStringLiteral("menuFile"));
        menuWindow = new QMenu(menubar);
        menuWindow->setObjectName(QStringLiteral("menuWindow"));
        menuHelp = new QMenu(menubar);
        menuHelp->setObjectName(QStringLiteral("menuHelp"));
        menuComponents = new QMenu(menubar);
        menuComponents->setObjectName(QStringLiteral("menuComponents"));
        menuTools = new QMenu(menuComponents);
        menuTools->setObjectName(QStringLiteral("menuTools"));
        menuDistance_Quality_measure = new QMenu(menuComponents);
        menuDistance_Quality_measure->setObjectName(QStringLiteral("menuDistance_Quality_measure"));
        menuAnalysis_Filtering = new QMenu(menuComponents);
        menuAnalysis_Filtering->setObjectName(QStringLiteral("menuAnalysis_Filtering"));
        menuSegmentation = new QMenu(menuComponents);
        menuSegmentation->setObjectName(QStringLiteral("menuSegmentation"));
        menuRemeshing_Subdivision = new QMenu(menuComponents);
        menuRemeshing_Subdivision->setObjectName(QStringLiteral("menuRemeshing_Subdivision"));
        menuCompression = new QMenu(menuComponents);
        menuCompression->setObjectName(QStringLiteral("menuCompression"));
        menuWatermaking = new QMenu(menuComponents);
        menuWatermaking->setObjectName(QStringLiteral("menuWatermaking"));
        menuExamples = new QMenu(menuComponents);
        menuExamples->setObjectName(QStringLiteral("menuExamples"));
        mainwindow->setMenuBar(menubar);
        statusbar = new QStatusBar(mainwindow);
        statusbar->setObjectName(QStringLiteral("statusbar"));
        mainwindow->setStatusBar(statusbar);
        Toolbar_file = new QToolBar(mainwindow);
        Toolbar_file->setObjectName(QStringLiteral("Toolbar_file"));
        QSizePolicy sizePolicy(QSizePolicy::Preferred, QSizePolicy::Minimum);
        sizePolicy.setHorizontalStretch(0);
        sizePolicy.setVerticalStretch(0);
        sizePolicy.setHeightForWidth(Toolbar_file->sizePolicy().hasHeightForWidth());
        Toolbar_file->setSizePolicy(sizePolicy);
        Toolbar_file->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_file);
        Toolbar_texture = new QToolBar(mainwindow);
        Toolbar_texture->setObjectName(QStringLiteral("Toolbar_texture"));
        sizePolicy.setHeightForWidth(Toolbar_texture->sizePolicy().hasHeightForWidth());
        Toolbar_texture->setSizePolicy(sizePolicy);
        Toolbar_texture->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_texture);
        Toolbar_viewer = new QToolBar(mainwindow);
        Toolbar_viewer->setObjectName(QStringLiteral("Toolbar_viewer"));
        sizePolicy.setHeightForWidth(Toolbar_viewer->sizePolicy().hasHeightForWidth());
        Toolbar_viewer->setSizePolicy(sizePolicy);
        Toolbar_viewer->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_viewer);
        mainwindow->insertToolBarBreak(Toolbar_viewer);
        Toolbar_color = new QToolBar(mainwindow);
        Toolbar_color->setObjectName(QStringLiteral("Toolbar_color"));
        sizePolicy.setHeightForWidth(Toolbar_color->sizePolicy().hasHeightForWidth());
        Toolbar_color->setSizePolicy(sizePolicy);
        Toolbar_color->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_color);
        mainwindow->insertToolBarBreak(Toolbar_color);
        Toolbar_show = new QToolBar(mainwindow);
        Toolbar_show->setObjectName(QStringLiteral("Toolbar_show"));
        sizePolicy.setHeightForWidth(Toolbar_show->sizePolicy().hasHeightForWidth());
        Toolbar_show->setSizePolicy(sizePolicy);
        Toolbar_show->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_show);
        Toolbar_view = new QToolBar(mainwindow);
        Toolbar_view->setObjectName(QStringLiteral("Toolbar_view"));
        sizePolicy.setHeightForWidth(Toolbar_view->sizePolicy().hasHeightForWidth());
        Toolbar_view->setSizePolicy(sizePolicy);
        Toolbar_view->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_view);
        mainwindow->insertToolBarBreak(Toolbar_view);
        Toolbar_capture = new QToolBar(mainwindow);
        Toolbar_capture->setObjectName(QStringLiteral("Toolbar_capture"));
        sizePolicy.setHeightForWidth(Toolbar_capture->sizePolicy().hasHeightForWidth());
        Toolbar_capture->setSizePolicy(sizePolicy);
        Toolbar_capture->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_capture);
        mainwindow->insertToolBarBreak(Toolbar_capture);
        Toolbar_dynamic = new QToolBar(mainwindow);
        Toolbar_dynamic->setObjectName(QStringLiteral("Toolbar_dynamic"));
        sizePolicy.setHeightForWidth(Toolbar_dynamic->sizePolicy().hasHeightForWidth());
        Toolbar_dynamic->setSizePolicy(sizePolicy);
        Toolbar_dynamic->setIconSize(QSize(16, 16));
        mainwindow->addToolBar(Qt::TopToolBarArea, Toolbar_dynamic);

        menubar->addAction(menuFile->menuAction());
        menubar->addAction(menuWindow->menuAction());
        menubar->addAction(menuComponents->menuAction());
        menubar->addAction(menuHelp->menuAction());
        menuFile->addAction(actionNew);
        menuFile->addAction(actionOpen);
        menuFile->addAction(actionOpen_space);
        menuFile->addAction(actionOpen_time);
        menuFile->addAction(actionOpen_and_Add_space);
        menuFile->addAction(actionOpen_and_Add_time);
        menuFile->addAction(actionSave_As);
        menuFile->addAction(actionClose);
        menuFile->addSeparator();
        menuFile->addAction(actionClone);
        menuFile->addAction(actionDelete);
        menuFile->addSeparator();
        menuFile->addAction(actionExit);
        menuWindow->addAction(actionClose_Window);
        menuWindow->addAction(actionClose_All);
        menuWindow->addSeparator();
        menuWindow->addAction(actionTile);
        menuWindow->addAction(actionCascade);
        menuWindow->addSeparator();
        menuWindow->addAction(actionNext);
        menuWindow->addAction(actionPrevious);
        menuWindow->addSeparator();
        menuWindow->addAction(actionChange_MDI_View_Mode);
        menuWindow->addSeparator();
        menuWindow->addAction(actionChange_Viewer_Mode_Space_Time);
        menuHelp->addAction(actionAbout);
        menuHelp->addAction(actionAbout_Qt);
        menuHelp->addAction(actionAbout_QGLViewer);
        menuHelp->addAction(actionAbout_CGAL);
        menuComponents->addAction(menuTools->menuAction());
        menuComponents->addAction(menuDistance_Quality_measure->menuAction());
        menuComponents->addAction(menuAnalysis_Filtering->menuAction());
        menuComponents->addAction(menuSegmentation->menuAction());
        menuComponents->addAction(menuRemeshing_Subdivision->menuAction());
        menuComponents->addAction(menuCompression->menuAction());
        menuComponents->addAction(menuWatermaking->menuAction());
        menuComponents->addSeparator();
        menuComponents->addAction(menuExamples->menuAction());
        menuTools->addSeparator();
        menuDistance_Quality_measure->addSeparator();
        menuAnalysis_Filtering->addSeparator();
        menuSegmentation->addSeparator();
        menuRemeshing_Subdivision->addSeparator();
        menuCompression->addSeparator();
        menuWatermaking->addSeparator();
        menuExamples->addSeparator();
        Toolbar_file->addAction(actionNew);
        Toolbar_file->addAction(actionOpen);
        Toolbar_file->addAction(actionSave_As);
        Toolbar_file->addSeparator();
        Toolbar_file->addAction(actionClone);
        Toolbar_file->addAction(actionDelete);
        Toolbar_texture->addAction(actionOpen_texture);
        Toolbar_texture->addAction(actionTexture_to_Vertex_Color);
        Toolbar_viewer->addAction(actionRender_Point);
        Toolbar_viewer->addAction(actionRender_Line);
        Toolbar_viewer->addAction(actionRender_Fill);
        Toolbar_viewer->addSeparator();
        Toolbar_viewer->addAction(actionSuperimpose_Vertices);
        Toolbar_viewer->addAction(actionSuperimpose_Vertices_big);
        Toolbar_viewer->addAction(actionSuperimpose_Edges);
        Toolbar_viewer->addSeparator();
        Toolbar_viewer->addAction(actionVertex_Color);
        Toolbar_viewer->addAction(actionFace_Color);
        Toolbar_viewer->addSeparator();
        Toolbar_viewer->addAction(actionTexture_Mode);
        Toolbar_viewer->addSeparator();
        Toolbar_viewer->addAction(actionLighting);
        Toolbar_viewer->addAction(actionSmooth_Shading);
        Toolbar_viewer->addSeparator();
        Toolbar_viewer->addAction(actionAntialiasing);
        Toolbar_viewer->addAction(actionCulling);
        Toolbar_color->addAction(actionBackground_color);
        Toolbar_color->addAction(actionVertex_color);
        Toolbar_color->addAction(actionEdge_color);
        Toolbar_color->addAction(actionFace_color);
        Toolbar_color->addSeparator();
        Toolbar_color->addAction(actionMaterial);
        Toolbar_show->addAction(actionShow_FPS);
        Toolbar_show->addAction(actionShow_axis);
        Toolbar_show->addAction(actionShow_grid);
        Toolbar_show->addSeparator();
        Toolbar_show->addAction(actionShow_normals);
        Toolbar_show->addSeparator();
        Toolbar_show->addAction(actionBounding_box);
        Toolbar_show->addAction(actionBounding_box_when_moving);
        Toolbar_view->addAction(actionReset_viewpoint);
        Toolbar_view->addAction(actionCopy_viewpoint);
        Toolbar_view->addAction(actionPaste_viewpoint);
        Toolbar_view->addSeparator();
        Toolbar_view->addAction(actionShow_entire_scene);
        Toolbar_view->addAction(actionCenter_all_objects);
        Toolbar_view->addAction(actionCouplingRotations);
        Toolbar_view->addSeparator();
        Toolbar_view->addAction(actionVBO);
        Toolbar_capture->addAction(actionScreenshot);
        Toolbar_capture->addAction(actionScreenshot_sequence);
        Toolbar_capture->addSeparator();
        Toolbar_capture->addAction(actionClipboard_screenshot);
        Toolbar_dynamic->addAction(actionParams);
        Toolbar_dynamic->addSeparator();
        Toolbar_dynamic->addAction(actionReverse_start_loop);
        Toolbar_dynamic->addAction(actionReverse_start);
        Toolbar_dynamic->addAction(actionStart);
        Toolbar_dynamic->addAction(actionStart_loop);
        Toolbar_dynamic->addAction(actionStop);
        Toolbar_dynamic->addSeparator();
        Toolbar_dynamic->addAction(actionDynFirst);
        Toolbar_dynamic->addAction(actionDynPrevious);
        Toolbar_dynamic->addAction(actionDynNext);
        Toolbar_dynamic->addAction(actionDynLast);

        retranslateUi(mainwindow);

        QMetaObject::connectSlotsByName(mainwindow);
    } // setupUi

    void retranslateUi(QMainWindow *mainwindow)
    {
        mainwindow->setWindowTitle(QApplication::translate("mainwindow", "MEPP", 0));
        actionNew->setText(QApplication::translate("mainwindow", "New", 0));
#ifndef QT_NO_STATUSTIP
        actionNew->setStatusTip(QString());
#endif // QT_NO_STATUSTIP
        actionOpen->setText(QApplication::translate("mainwindow", "Open...", 0));
        actionOpen->setIconText(QApplication::translate("mainwindow", "Open...", 0));
#ifndef QT_NO_TOOLTIP
        actionOpen->setToolTip(QApplication::translate("mainwindow", "Open...", 0));
#endif // QT_NO_TOOLTIP
        actionOpen_and_Add_space->setText(QApplication::translate("mainwindow", "Open and Add (space)...", 0));
        actionSave_As->setText(QApplication::translate("mainwindow", "Save As...", 0));
        actionSave_As->setIconText(QApplication::translate("mainwindow", "Save As...", 0));
#ifndef QT_NO_TOOLTIP
        actionSave_As->setToolTip(QApplication::translate("mainwindow", "Save As...", 0));
#endif // QT_NO_TOOLTIP
        actionClose->setText(QApplication::translate("mainwindow", "Close", 0));
        actionExit->setText(QApplication::translate("mainwindow", "Exit", 0));
        actionClose_Window->setText(QApplication::translate("mainwindow", "Close", 0));
        actionClose_All->setText(QApplication::translate("mainwindow", "Close All", 0));
        actionTile->setText(QApplication::translate("mainwindow", "Tile", 0));
        actionCascade->setText(QApplication::translate("mainwindow", "Cascade", 0));
        actionNext->setText(QApplication::translate("mainwindow", "Next", 0));
        actionPrevious->setText(QApplication::translate("mainwindow", "Previous", 0));
        actionAbout->setText(QApplication::translate("mainwindow", "About MEPP / Help", 0));
        actionOpen_and_Add_time->setText(QApplication::translate("mainwindow", "Open and Add (time)...", 0));
        actionAbout_Qt->setText(QApplication::translate("mainwindow", "About Qt", 0));
        actionLighting->setText(QApplication::translate("mainwindow", "Lighting", 0));
        actionAntialiasing->setText(QApplication::translate("mainwindow", "Antialiasing", 0));
        actionVertex_Color->setText(QApplication::translate("mainwindow", "Vertex Color Mode", 0));
        actionFace_Color->setText(QApplication::translate("mainwindow", "Face Color Mode", 0));
        actionRender_Point->setText(QApplication::translate("mainwindow", "Render Point", 0));
        actionRender_Line->setText(QApplication::translate("mainwindow", "Render Line", 0));
        actionRender_Fill->setText(QApplication::translate("mainwindow", "Render Fill", 0));
        actionSuperimpose_Edges->setText(QApplication::translate("mainwindow", "Superimpose Edges", 0));
        actionSuperimpose_Vertices->setText(QApplication::translate("mainwindow", "Superimpose Vertices", 0));
        actionSmooth_Shading->setText(QApplication::translate("mainwindow", "Smooth Shading", 0));
        actionCulling->setText(QApplication::translate("mainwindow", "Culling", 0));
        actionParams->setText(QApplication::translate("mainwindow", "Params", 0));
        actionReverse_start->setText(QApplication::translate("mainwindow", "Reverse start", 0));
        actionReverse_start_loop->setText(QApplication::translate("mainwindow", "Reverse start loop", 0));
        actionStart->setText(QApplication::translate("mainwindow", "Start", 0));
        actionStart_loop->setText(QApplication::translate("mainwindow", "Start loop", 0));
        actionStop->setText(QApplication::translate("mainwindow", "Stop", 0));
        actionDynFirst->setText(QApplication::translate("mainwindow", "First", 0));
        actionDynPrevious->setText(QApplication::translate("mainwindow", "Previous", 0));
        actionDynNext->setText(QApplication::translate("mainwindow", "Next", 0));
        actionDynLast->setText(QApplication::translate("mainwindow", "Last", 0));
        actionDelete->setText(QApplication::translate("mainwindow", "Delete current mesh (in Space or Time mode)", 0));
#ifndef QT_NO_TOOLTIP
        actionDelete->setToolTip(QApplication::translate("mainwindow", "Delete current mesh (in Space or Time mode)", 0));
#endif // QT_NO_TOOLTIP
        actionCouplingRotations->setText(QApplication::translate("mainwindow", "Coupling rotations (in Space mode)", 0));
        actionShow_entire_scene->setText(QApplication::translate("mainwindow", "Show entire scene", 0));
        actionOpen_space->setText(QApplication::translate("mainwindow", "Open (space)...", 0));
        actionOpen_time->setText(QApplication::translate("mainwindow", "Open (time)...", 0));
        actionAbout_QGLViewer->setText(QApplication::translate("mainwindow", "About QGLViewer", 0));
        actionAbout_CGAL->setText(QApplication::translate("mainwindow", "About CGAL", 0));
        actionCopy_viewpoint->setText(QApplication::translate("mainwindow", "Copy viewpoint", 0));
        actionPaste_viewpoint->setText(QApplication::translate("mainwindow", "Paste viewpoint", 0));
        actionBackground_color->setText(QApplication::translate("mainwindow", "Background color", 0));
        actionVertex_color->setText(QApplication::translate("mainwindow", "Vertex color", 0));
        actionEdge_color->setText(QApplication::translate("mainwindow", "Edge color", 0));
        actionClone->setText(QApplication::translate("mainwindow", "Copy/Clone current mesh", 0));
        actionMaterial->setText(QApplication::translate("mainwindow", "Material", 0));
        actionBounding_box->setText(QApplication::translate("mainwindow", "Bounding box", 0));
        actionBounding_box_when_moving->setText(QApplication::translate("mainwindow", "Bounding box when moving", 0));
        actionScreenshot->setText(QApplication::translate("mainwindow", "Screenshot", 0));
        actionVBO->setText(QApplication::translate("mainwindow", "'Display Lists' mode", 0));
        actionFace_color->setText(QApplication::translate("mainwindow", "Face color", 0));
        actionShow_normals->setText(QApplication::translate("mainwindow", "Show normals", 0));
        actionCenter_all_objects->setText(QApplication::translate("mainwindow", "Center all meshes (in Space mode)", 0));
        actionScreenshot_sequence->setText(QApplication::translate("mainwindow", "Screenshot sequence", 0));
        actionShow_FPS->setText(QApplication::translate("mainwindow", "Show FPS", 0));
        actionShow_axis->setText(QApplication::translate("mainwindow", "Show axis", 0));
        actionShow_grid->setText(QApplication::translate("mainwindow", "Show grid", 0));
        actionShow_light->setText(QApplication::translate("mainwindow", "Show light", 0));
        actionClipboard_screenshot->setText(QApplication::translate("mainwindow", "Clipboard screenshot", 0));
        actionReset_viewpoint->setText(QApplication::translate("mainwindow", "Reset viewpoint for current mesh", 0));
        actionSuperimpose_Vertices_big->setText(QApplication::translate("mainwindow", "Superimpose Vertices (bigger)", 0));
#ifndef QT_NO_TOOLTIP
        actionSuperimpose_Vertices_big->setToolTip(QApplication::translate("mainwindow", "Superimpose Vertices (bigger)", 0));
#endif // QT_NO_TOOLTIP
        actionChange_MDI_View_Mode->setText(QApplication::translate("mainwindow", "Change MDI View Mode (-> to Tabbed View)", 0));
        actionChange_Viewer_Mode_Space_Time->setText(QApplication::translate("mainwindow", "Change Viewer Mode (Normal)", 0));
        actionOpen_texture->setText(QApplication::translate("mainwindow", "Open texture", 0));
        actionTexture_settings->setText(QApplication::translate("mainwindow", "Texture settings", 0));
        actionTexture_to_Vertex_Color->setText(QApplication::translate("mainwindow", "Texture to Vertex Color", 0));
        actionTexture_Mode->setText(QApplication::translate("mainwindow", "Texture Mode", 0));
        menuFile->setTitle(QApplication::translate("mainwindow", "File", 0));
        menuWindow->setTitle(QApplication::translate("mainwindow", "Window", 0));
        menuHelp->setTitle(QApplication::translate("mainwindow", "Help", 0));
        menuComponents->setTitle(QApplication::translate("mainwindow", "Components", 0));
        menuTools->setTitle(QApplication::translate("mainwindow", "Tools / Processing", 0));
        menuDistance_Quality_measure->setTitle(QApplication::translate("mainwindow", "Distance / Quality measure", 0));
        menuAnalysis_Filtering->setTitle(QApplication::translate("mainwindow", "Analysis / Filtering", 0));
        menuSegmentation->setTitle(QApplication::translate("mainwindow", "Segmentation", 0));
        menuRemeshing_Subdivision->setTitle(QApplication::translate("mainwindow", "Remeshing / Subdivision", 0));
        menuCompression->setTitle(QApplication::translate("mainwindow", "Compression", 0));
        menuWatermaking->setTitle(QApplication::translate("mainwindow", "Watermaking", 0));
        menuExamples->setTitle(QApplication::translate("mainwindow", "Examples", 0));
        Toolbar_file->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_file", 0));
        Toolbar_texture->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_texture", 0));
        Toolbar_viewer->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_viewer", 0));
        Toolbar_color->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_color", 0));
        Toolbar_show->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_show", 0));
        Toolbar_view->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_view", 0));
        Toolbar_capture->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_capture", 0));
        Toolbar_dynamic->setWindowTitle(QApplication::translate("mainwindow", "Toolbar_dynamic", 0));
    } // retranslateUi

};

namespace Ui {
    class mainwindow: public Ui_mainwindow {};
} // namespace Ui

QT_END_NAMESPACE

#endif // UI_MAINWINDOW_H
